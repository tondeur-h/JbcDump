       
    /***********************
     * Print interfaces infos
     * String
     ***********************/
    private void interfaces_infos_print() {
         for (String str:classFile.getInterfaces()) {System.out.println(str);}
    }

    /**************************
     * alimenter le tableau
     * des interfaces_infos.
     **************************/
    private void interfaces_infos_read() {
        //must be a CONSTANT_Class_Info <=> Tag=7
                
        String typeii="";
        String stringii="";
        //alloc array constant_pool_strings
        String[] interfaces_infos_tab=new String[tools.Integ(classFile.getInterfaces_count())];
        
    for (int count_pool=0;count_pool<tools.Integ(classFile.getInterfaces_count());count_pool++)
    {
       //lire le tag
        int tag=tools.Integ(tools.getNextBytes(1));
        switch(tag)
        {
            case 7 -> {
                typeii="CONSTANT_Class";stringii=call_constant(tag);
                }
        }
       interfaces_infos_tab[count_pool]="#"+(count_pool+1)+":"+typeii+" : "+stringii;
    }
    classFile.setInterfaces(interfaces_infos_tab);
    }

    /**************************
     * alimenter le tableau
     * des fields_infos.
     **************************/
    private void fields_infos_read() {
        String[] fields=new String[tools.Integ(classFile.getFields_count())];//initier le tableau des fields
        
        for (int count_fields=0;count_fields<tools.Integ(classFile.getFields_count());count_fields++)
        {
        /*
        field_info {
            u2 access_flags;
            u2 name_index;
            u2 descriptor_index;
            u2 attributes_count;
            attribute_info attributes[attributes_count];
        }*/

        //convertir access_flags
        String access_flags_str=tools.Attributes_ACFTab(tools.Integ(tools.getNextBytes(2)));
        int name_index=tools.Integ(tools.getNextBytes(2));
        int descriptor_index=tools.Integ(tools.getNextBytes(2));
        int attributes_count=tools.Integ(tools.getNextBytes(2));
        
        //attribute_info attributes[attributes_count]
        //TODO a revoir...
        String attributes_infos_str=iterate_attributes(attributes_count);
        
        fields[count_fields]=access_flags_str+
                "#"+name_index+" "+extract_constant_pool_value(name_index)+"\r\n"+
                "#"+descriptor_index+" "+extract_constant_pool_value(descriptor_index)+"\r\n"+
                "["+attributes_infos_str+"]";
        }
        classFile.setFields(fields);
    }

    /***********************
     * Print fields infos
     * String
     ***********************/
    private void fields_infos_print() {
        for (String str:classFile.getFields()) {System.out.println(str);}
    }

    /**************************
     * alimenter le tableau
     * des methods_infos.
     **************************/
    private void methods_infos_read() {
          String[] methods=new String[tools.Integ(classFile.getMethods_count())];//initier le tableau des methods
        
        for (int count_methods=0;count_methods<tools.Integ(classFile.getMethods_count());count_methods++)
        {
        /*method_info {
			u2 access_flags;
			u2 name_index;
			u2 descriptor_index;
			u2 attributes_count;
			attribute_info attributes[attributes_count];
		}*/
        //convertir access_flags
        String access_flags_str=tools.Methodes_ACMTab(tools.Integ(tools.getNextBytes(2)));
        int name_index=tools.Integ(tools.getNextBytes(2));
        int descriptor_index=tools.Integ(tools.getNextBytes(2));
        int attributes_count=tools.Integ(tools.getNextBytes(2));
        
        //attribute_info attributes[attributes_count]
        String attributes_infos_str=iterate_attributes(attributes_count);
        
        methods[count_methods]=access_flags_str+"\r\n"+
                "#"+name_index+" "+extract_constant_pool_value(name_index)+"\r\n"+
                "#"+descriptor_index+" "+extract_constant_pool_value(descriptor_index)+"\r\n"+
                attributes_infos_str;
        }
        classFile.setMethods(methods);
    }

    /***********************
     * Print methods infos
     * String
     ***********************/
    private void methods_infos_print() {
        for (String str:classFile.getMethods()) {System.out.println(str);}
    }

    /**************************
     * alimenter le tableau
     * des attributes_infos.
     **************************/
    private void atributes_infos_read() {
        System.out.println(iterate_attributes_end_file(tools.Integ(classFile.getAttributes_count())));
    }
   
    /***************************
     * Itterer dans le code des
     * attributs (multi sources
     * @param attributes_count
     * @return 
     ***************************/
    private String iterate_attributes(int attributes_count) {
      String result="";
        /*
	attribute_info {
	u2 attribute_name_index;
	u4 attribute_length;
	u1 info[attribute_length];
	}
        */
        for (int attributes_count_counter=0;attributes_count_counter<attributes_count;attributes_count_counter++)
        {
        int attribute_name_index=tools.Integ(tools.getNextBytes(2));
        int attribute_length=tools.Integ(tools.getNextBytes(4));
        //get u1 info
        String code=tools.Hex(tools.getNextBytes(attribute_length),true,true);
                
        result="#"+attribute_name_index+" "+extract_constant_pool_value(attribute_name_index)+
        "["+code+"]";
        }
        return result;
    }

    /***************************
     * Itterer dans le code des
     * attributs (multi sources
     * @param attributes_count
     * @return 
     ***************************/
    private String iterate_attributes_end_file(int attributes_count) {
      String result="";
        /*
	attribute_info {
	u2 attribute_name_index;
	u4 attribute_length;
	u1 info[attribute_length];
	}
        */
        for (int attributes_count_counter=0;attributes_count_counter<attributes_count;attributes_count_counter++)
        {
        int attribute_name_index=tools.Integ(tools.getNextBytes(2));
        int attribute_length=tools.Integ(tools.getNextBytes(4));
        //get u1 info
        int code=tools.Integ(tools.getNextBytes(attribute_length));
                
        result="#"+attribute_name_index+".#"+code+"\r\n"+
        extract_constant_pool_value(attribute_name_index)+" "+
        extract_constant_pool_value(code);
        }
        return result;
    }

    
    /******************************
     * Extract vlaeur de CP
     * @param index_constant_pool
     * @return 
     ******************************/
    private String extract_constant_pool_value(int index_constant_pool)
    {
        String result;
        String[] constant_pool=classFile.getConstant_pool();
        
        result=constant_pool[index_constant_pool-1];
        
        return result;
    }
